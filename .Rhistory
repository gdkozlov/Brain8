abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 1)$predicted_times_zc*10000)
plot(wave_file_length3[[1]]@left, type = 'l', xlab = 'Window number', ylab = 'Zero crossings')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 1000)$predicted_times_zc*10000)
plot(wave_file_length3[[1]]@left, type = 'l', xlab = 'Window number', ylab = 'Zero crossings')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 500)$predicted_times_zc*10000)
vary_threshold_classifier_zc(wave_file_length3[[1]], )$predicted_values
plot(wave_file_length3[[1]]@left, type = 'l', xlab = 'Window number', ylab = 'Zero crossings')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 300)$predicted_times_zc*10000)
plot(wave_file_length3[[1]]@left, type = 'l', xlab = 'Window number', ylab = 'Zero crossings')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 200)$predicted_times_zc*10000)
plot(wave_file_length3[[1]]@left, type = 'l', xlab = 'Window number', ylab = 'Zero crossings')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 100)$predicted_times_zc*10000)
plot(wave_file_length3[[1]]@left, type = 'l', xlab = 'Window number', ylab = 'Zero crossings')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 150)$predicted_times_zc*10000)
plot(wave_file_length3[[1]]@left, type = 'l', xlab = 'Window number', ylab = 'Zero crossings')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 175)$predicted_times_zc*10000)
plot(wave_file_length3[[1]]@left, type = 'l', xlab = 'Window number', ylab = 'Zero crossings')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 180)$predicted_times_zc*10000)
vary_threshold_classifier_zc(wave_file_length3[[1]], 20)$zc_values
vary_threshold_classifier_zc(wave_file_length3[[1]], 20)$zc_values %>% plot(., type = 'l', xlab = 'Window number', ylab = 'Zero crossings')
vary_threshold_classifier_amp(wave_file_length3[[1]], 869)$amp_values %>% plot(x = ., type = 'l' xlab = 'Window number', ylab = 'Max amplitude')
vary_threshold_classifier_amp(wave_file_length3[[1]], 869)$amp_values %>% plot(x = ., type = 'l', xlab = 'Window number', ylab = 'Max amplitude')
vary_threshold_classifier_amp(wave_file_length3[[1]], 869)$amp_values %>% plot(x = ., type = 'l', xlab = 'Window number', ylab = 'Max amplitude', title = 'Max amplitude for each rolling window of an LLL wave')
vary_threshold_classifier_amp(wave_file_length3[[1]], 869)$amp_values %>% plot(x = ., type = 'l', xlab = 'Window number', ylab = 'Max amplitude', main = 'Max amplitude for each rolling window of an LLL wave')
vary_threshold_classifier_amp(wave_file_length3[[1]], 869)$amp_values %>% plot(x = ., type = 'l', xlab = 'Window number', ylab = 'Max amplitude', main = 'Max amplitude of rolling window for LLL wave')
vary_threshold_classifier_zc(wave_file_length3[[1]], 20)$zc_values %>% plot(., type = 'l', xlab = 'Window number', ylab = 'Zero crossings', main = 'Zero crossings in rolling window for LLL wave')
vary_threshold_classifier(wave_file_length3[[1]], 869)$sd_values %>% plot(., type = 'l', xlab = 'Window number', ylab = 'Standard deviation', main = 'Standard deviation of rolling window for LLL wave')
plot(wave_file_length3[[1]]@left, type = 'l')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 180)$predicted_times_zc*10000)
timeSeq <- seq_len(length(wave_file_length3[[1]]))/wave_file_length3[[1]]@samp.rate
timeSeq <- seq_len(length(wave_file_length3[[1]]))/wave_file_length3[[1]]@samp.rate
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using standard deviation', xlab = 'Tim in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 864)$predicted_times_sd*10000)
timeSeq <- seq_len(length(wave_file_length3[[1]]))/wave_file_length3[[1]]@samp.rate
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using standard deviation', xlab = 'Tim in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_sd(wave_file_length3[[1]], 864)$predicted_times_sd*10000)
timeSeq <- seq_len(length(wave_file_length3[[1]]))/wave_file_length3[[1]]@samp.rate
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using standard deviation', xlab = 'Tim in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_sd(wave_file_length3[[1]], 864)$predicted_times_sd*10000)
vary_threshold_classifier_sd = function(wave_file, events,
window_size = wave_file@samp.rate,
increment = window_size/10)
{
Y = wave_file@left
xtime = seq_len(length(wave_file@left))/wave_file@samp.rate
predicted_labels_sd = c()
predicted_times_sd = c()
lower_interval = 1
max_time = max(xtime)*window_size
sd_values <- c()
while(max_time > lower_interval + window_size)
{
is_event = 'F'
upper_interval = lower_interval + window_size
interval = Y[lower_interval:upper_interval]
sd_values <- append(sd_values, sd(interval))
is_event = vary_threshold_sd(Y = interval, thresholdEvents = events)
if (is_event == 'T') {
predicted_sd = LR_detection(interval)
predicted_labels_sd = c(predicted_labels_sd, predicted_sd)
predicted_times_sd = c(predicted_times_sd, lower_interval/10000)
}
lower_interval = lower_interval + increment
}
return (list(predicted_labels_sd = predicted_labels_sd,
predicted_times_sd = predicted_times_sd,
sd_values = sd_values))
}
timeSeq <- seq_len(length(wave_file_length3[[1]]))/wave_file_length3[[1]]@samp.rate
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using standard deviation', xlab = 'Tim in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_sd(wave_file_length3[[1]], 864)$predicted_times_sd*10000)
vary_threshold_classifier_sd(wave_file_length3[[1]], 864
vary_threshold_classifier_sd(wave_file_length3[[1]], 864)
abline(v = vary_threshold_classifier_sd(wave_file_length3[[1]], 864)$predicted_times_sd)
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using standard deviation', xlab = 'Tim in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_sd(wave_file_length3[[1]], 864)$predicted_times_sd)
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using standard deviation', xlab = 'Tim in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_sd(wave_file_length3[[1]], 2000)$predicted_times_sd)
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using standard deviation', xlab = 'Tim in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_sd(wave_file_length3[[1]], 500)$predicted_times_sd)
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using standard deviation', xlab = 'Tim in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_sd(wave_file_length3[[1]], 600)$predicted_times_sd)
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using standard deviation', xlab = 'Tim in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_sd(wave_file_length3[[1]], 800)$predicted_times_sd)
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using standard deviation', xlab = 'Tim in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_sd(wave_file_length3[[1]], 700)$predicted_times_sd)
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using standard deviation', xlab = 'Tim in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_sd(wave_file_length3[[1]], 600)$predicted_times_sd)
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using standard deviation', xlab = 'Tim in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_sd(wave_file_length3[[1]], 650)$predicted_times_sd)
plot(wave_file_length3[[1]]@left, type = 'l')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 180)$predicted_times_zc*10000)
plot(wave_file_length3[[1]]@left, type = 'l')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 200)$predicted_times_zc*10000)
plot(wave_file_length3[[1]]@left, type = 'l')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 150)$predicted_times_zc*10000)
plot(wave_file_length3[[1]]@left, type = 'l')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 100)$predicted_times_zc*10000)
plot(wave_file_length3[[1]]@left, type = 'l')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 50)$predicted_times_zc*10000)
vary_threshold_classifier_zc(wave_file_length3[[1]], 20)$zc_values %>% plot(., type = 'l', xlab = 'Window number', ylab = 'Zero crossings', main = 'Zero crossings in rolling window for LLL wave')
plot(wave_file_length3[[1]]@left, type = 'l')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 50)$predicted_times_zc*10000)
vary_threshold_zc = function(Y,
thresholdEvents) {
testStat <- sum(Y[1:(length(Y) - 1)] * Y[2:(length(Y))] <= 0)
return (ifelse(testStat > thresholdEvents, 'T', 'F'))
}
plot(wave_file_length3[[1]]@left, type = 'l')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 50)$predicted_times_zc*10000)
vary_threshold_classifier_zc = function(wave_file, events,
window_size = wave_file@samp.rate,
increment = window_size/10)
{
Y = wave_file@left
xtime = seq_len(length(wave_file@left))/wave_file@samp.rate
predicted_labels_zc = c()
predicted_times_zc = c()
lower_interval = 1
max_time = max(xtime)*window_size
zc_values <- c()
second_check = 'F'
while(max_time > lower_interval + window_size)
{
is_event = 'F'
upper_interval = lower_interval + window_size
interval = Y[lower_interval:upper_interval]
zc_values <- append(zc_values, sum(interval[1:(length(interval) - 1)] * interval[2:(length(interval))] <= 0))
is_event = vary_threshold_zc(Y = interval, thresholdEvents = events)
if (is_event == 'T') {
if (second_check == 'F') {
second_check = 'T'
} else {
predicted_zc = LR_detection(interval)
predicted_labels_zc = c(predicted_labels_zc, predicted_zc)
predicted_times_zc = c(predicted_times_zc, lower_interval/10000)
second_check = 'F'
}
}
lower_interval = lower_interval + increment
}
return (list(predicted_labels_zc = predicted_labels_zc,
predicted_times_zc = predicted_times_zc,
zc_values = zc_values))
}
plot(wave_file_length3[[1]]@left, type = 'l')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 50)$predicted_times_zc*10000)
vary_threshold_zc = function(Y,
thresholdEvents) {
testStat <- sum(Y[1:(length(Y) - 1)] * Y[2:(length(Y))] <= 0)
return (ifelse(testStat < thresholdEvents, 'T', 'F'))
}
vary_threshold_classifier_zc = function(wave_file, events,
window_size = wave_file@samp.rate,
increment = window_size/10)
{
Y = wave_file@left
xtime = seq_len(length(wave_file@left))/wave_file@samp.rate
predicted_labels_zc = c()
predicted_times_zc = c()
lower_interval = 1
max_time = max(xtime)*window_size
zc_values <- c()
second_check = 'F'
while(max_time > lower_interval + window_size)
{
is_event = 'F'
upper_interval = lower_interval + window_size
interval = Y[lower_interval:upper_interval]
zc_values <- append(zc_values, sum(interval[1:(length(interval) - 1)] * interval[2:(length(interval))] <= 0))
is_event = vary_threshold_zc(Y = interval, thresholdEvents = events)
if (is_event == 'T') {
if (second_check == 'F') {
second_check = 'T'
} else {
predicted_zc = LR_detection(interval)
predicted_labels_zc = c(predicted_labels_zc, predicted_zc)
predicted_times_zc = c(predicted_times_zc, lower_interval/10000)
second_check = 'F'
}
}
lower_interval = lower_interval + increment
}
return (list(predicted_labels_zc = predicted_labels_zc,
predicted_times_zc = predicted_times_zc,
zc_values = zc_values))
}
plot(wave_file_length3[[1]]@left, type = 'l')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 50)$predicted_times_zc*10000)
plot(wave_file_length3[[1]]@left, type = 'l')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 100)$predicted_times_zc*10000)
plot(wave_file_length3[[1]]@left, type = 'l')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 70)$predicted_times_zc*10000)
plot(wave_file_length3[[1]]@left, type = 'l')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 50)$predicted_times_zc*10000)
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using zero crossings', xlab = 'Time in seconds', ylab = 'Wave')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 70)$predicted_times_zc*10000)
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using zero crossings', xlab = 'Time in seconds', ylab = 'Wave')
abline(h = 0)
abline(v = vary_threshold_classifier_zc(wave_file_length3[[1]], 70)$predicted_times_zc)
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using max amplitude', xlab = 'Time in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_amp(wave_file_length3[[1]], 70)$predicted_times_amp)
vary_threshold_classifier_amp(wave_file_length3[[8]], 869)$amp_values %>% plot
vary_threshold_classifier_amp(wave_file_length3[[1]], 869)$amp_values %>% plot(x = ., type = 'l', xlab = 'Window number', ylab = 'Max amplitude', main = 'Max amplitude of rolling window for LLL wave')
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using max amplitude', xlab = 'Time in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_amp(wave_file_length3[[1]], 2000)$predicted_times_amp)
vary_threshold_amp = function(Y,
thresholdEvents) {
testStat <- abs(Y) %>% max
return (ifelse(testStat > thresholdEvents, 'T', 'F'))
}
vary_threshold_classifier_amp = function(wave_file, events,
window_size = wave_file@samp.rate,
increment = window_size/10)
{
Y = wave_file@left
xtime = seq_len(length(wave_file@left))/wave_file@samp.rate
predicted_labels_amp = c()
predicted_times_amp = c()
lower_interval = 1
max_time = max(xtime)*window_size
amp_values <- c()
end_event = 'F'
while(max_time > lower_interval + window_size)
{
is_event = 'F'
upper_interval = lower_interval + window_size
interval = Y[lower_interval:upper_interval]
amp_values <- append(amp_values, abs(interval) %>% max)
is_event = vary_threshold_amp(Y = interval, thresholdEvents = events)
if (is_event == 'T') {
if (end_event == 'F') {
end_event = 'T'
} else {
predicted_amp = LR_detection(interval)
predicted_labels_amp = c(predicted_labels_amp, predicted_amp)
predicted_times_amp = c(predicted_times_amp, lower_interval/10000)
end_event = 'F'
}
}
lower_interval = lower_interval + increment
}
return (list(predicted_labels_amp = predicted_labels_amp,
predicted_times_amp = predicted_times_amp,
amp_values = amp_values))
}
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using max amplitude', xlab = 'Time in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_amp(wave_file_length3[[1]], 2000)$predicted_times_amp)
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using max amplitude', xlab = 'Time in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_amp(wave_file_length3[[1]], 1000)$predicted_times_amp)
abline(v = vary_threshold_classifier_amp(wave_file_length3[[1]], 3000)$predicted_times_amp)
plot(timeSeq, wave_file_length3[[1]]@left, type = 'l', main = 'Predicted events using max amplitude', xlab = 'Time in seconds', ylab = 'Wave')
abline(v = vary_threshold_classifier_amp(wave_file_length3[[1]], 2200)$predicted_times_amp)
1917335/2539569
93*6+82*3+87*3+86*2+85*2+80*2+90*6
(93*6+82*3+87*3+86*2+85*2+80*2+90*6)/24
(55*6+76*6+51*3+61*3+60*3+81*3)/24
(18*6+56*6+22*2)/16
(76*6+76*6+92*6+89*2)/20
(75*6+84*6+52*6)/18
(71*6+61*6+17*6+80*2)/22
(93*6+82*3+87*3+86*2+85*2+80*2+90*6)+
(55*6+76*6+51*3+61*3+60*3+81*3)+
(18*6+56*6+22*2)+
(76*6+76*6+92*6+89*2)+
(75*6+84*6+52*6)+
(71*6+61*6+17*6+80*2)+
(93*6+82*3+87*3+86*2+85*2+80*2+90*6)+
(55*6+76*6+51*3+61*3+60*3+81*3)+
(18*6+56*6+22*2)+
(76*6+76*6+92*6+89*2)+
(75*6+84*6+52*6)+
(71*6+61*6+17*6+80*2)
((93*6+82*3+87*3+86*2+85*2+80*2+90*6)+
(55*6+76*6+51*3+61*3+60*3+81*3)+
(18*6+56*6+22*2)+
(76*6+76*6+92*6+89*2)+
(75*6+84*6+52*6)+
(71*6+61*6+17*6+80*2)
)/(24+24+16+20+18+22)
((93*6+82*3+87*3+86*2+85*2+80*2+90*6)+
(55*6+76*6+51*3+61*3+60*3+81*3)+
(18*6+56*6+22*2)+
(76*6+76*6+92*6+89*2)+
(75*6+84*6+52*6)+
(71*6+61*6+17*6+80*2)+
(20*6+42*6+80*6+56*6)
)/(24+24+16+20+18+22+24)
(24+24+16+20+18+22+24)
(7*27+6*46+5*6+4*39)/148
(7*27+6*52+5*6+4*45)/172
plot(wave_file_mark[[1]], type = 'l')
library(tidyverse)
library(ggplot2)
library(cvTools)
library(tuneR)
library(tsfeatures)
library(class)
library(matrixStats)
dir_length3 = 'zoe_spiker/Length3'
all_files_length3 <- list.files(dir_length3)
wave_file_length3 <- list()
wave_left_length3 <- list()
for (i in all_files_length3) {
wave_file_length3[[i]] <- readWave(file.path(dir_length3, i))
wave_left_length3[[i]] <- readWave(file.path(dir_length3, i))@left
}
length3_lab <- substr(all_files_length3, 1, 3)
dir_length8 = 'zoe_spiker/Length8'
all_files_length8 <- list.files(dir_length8)
wave_file_length8 <- list()
wave_left_length8 <- list()
for (i in all_files_length8) {
wave_file_length8[[i]] <- readWave(file.path(dir_length8, i))
wave_left_length8[[i]] <- readWave(file.path(dir_length8, i))@left
}
length8_lab <- substr(all_files_length8, 1, 8)
dir_long = 'zoe_spiker/long'
all_files_long <- list.files(dir_long)
wave_file_long <- list()
wave_left_long <- list()
for (i in all_files_long) {
wave_file_long[[i]] <- readWave(file.path(dir_long, i))
wave_left_long[[i]] <- readWave(file.path(dir_long, i))@left
}
long_lab <- substr(all_files_long, 1, 20)
dir_mark <- 'Brain8-main/L3'
all_files_mark <- list.files(dir_mark)
wave_file_mark <- list()
wave_left_mark <- list()
for (i in all_files_mark) {
wave_file_mark[[i]] <- readWave(file.path(dir_mark, i))
wave_left_mark[[i]] <- readWave(file.path(dir_mark, i))@left
}
#labels
mark_lab <- list()
for (i in 1:length(all_files_mark)) {
labels <- gsub(".wav", "", all_files_mark[i])
mark_lab[i] <- strsplit(labels, "")
}
mark_lab <- mark_lab %>% unlist()
mark_lab[16:29] <- 'N'
new_left_mark <- list(
wave_left_mark[[1]][12000:22000],
wave_left_mark[[1]][23000:35000],
wave_left_mark[[1]][38000:45000],
wave_left_mark[[2]][10000:28000],
wave_left_mark[[2]][27000:40000],
wave_left_mark[[2]][40000:55000],
wave_left_mark[[3]][10000:25000],
wave_left_mark[[3]][25000:35000],
wave_left_mark[[3]][37000:47000],
wave_left_mark[[4]][6000:18000],
wave_left_mark[[4]][23000:32000],
wave_left_mark[[4]][35000:50000],
wave_left_mark[[5]][10000:27000],
wave_left_mark[[5]][26000:42000],
wave_left_mark[[5]][42000:53000],
wave_left_mark[[6]][0:13000],
wave_left_mark[[6]][26000:39000],
wave_left_mark[[7]][5000:17000],
wave_left_mark[[7]][17000:30000],
wave_left_mark[[7]][30000:43000],
wave_left_mark[[8]][10000:23000],
wave_left_mark[[8]][23000:36000],
wave_left_mark[[8]][36000:49000],
wave_left_mark[[8]][49000:62000],
wave_left_mark[[9]][25000:38000],
wave_left_mark[[9]][38000:51000],
wave_left_mark[[10]][12000:25000],
wave_left_mark[[10]][25000:38000],
wave_left_mark[[10]][38000:49000],
wave_left_mark[[11]][5000:17000],
wave_left_mark[[11]][18000:28000],
wave_left_mark[[11]][28000:42000],
wave_left_mark[[12]][12000:27000],
wave_left_mark[[12]][29000:40000],
wave_left_mark[[12]][40000:52000])
new_file_mark <- list(
wave_file_mark[[1]][12000:22000],
wave_file_mark[[1]][23000:35000],
wave_file_mark[[1]][38000:45000],
wave_file_mark[[2]][10000:28000],
wave_file_mark[[2]][27000:40000],
wave_file_mark[[2]][40000:55000],
wave_file_mark[[3]][10000:25000],
wave_file_mark[[3]][25000:35000],
wave_file_mark[[3]][37000:47000],
wave_file_mark[[4]][6000:18000],
wave_file_mark[[4]][23000:32000],
wave_file_mark[[4]][35000:50000],
wave_file_mark[[5]][10000:27000],
wave_file_mark[[5]][26000:42000],
wave_file_mark[[5]][42000:53000],
wave_file_mark[[6]][0:13000],
wave_file_mark[[6]][26000:39000],
wave_file_mark[[7]][5000:17000],
wave_file_mark[[7]][17000:30000],
wave_file_mark[[7]][30000:43000],
wave_file_mark[[8]][10000:23000],
wave_file_mark[[8]][23000:36000],
wave_file_mark[[8]][36000:49000],
wave_file_mark[[8]][49000:62000],
wave_file_mark[[9]][25000:38000],
wave_file_mark[[9]][38000:51000],
wave_file_mark[[10]][12000:25000],
wave_file_mark[[10]][25000:38000],
wave_file_mark[[10]][38000:49000],
wave_file_mark[[11]][5000:17000],
wave_file_mark[[11]][18000:28000],
wave_file_mark[[11]][28000:42000],
wave_file_mark[[12]][12000:27000],
wave_file_mark[[12]][29000:40000],
wave_file_mark[[12]][40000:52000])
wave_left_mark[[3]] <- wave_left_mark[[3]][10000:47000]
wave_left_mark[[5]] <- wave_left_mark[[5]][10000:53000]
wave_left_mark[[6]] <- wave_left_mark[[6]][0:39000]
wave_left_mark[[7]] <- wave_left_mark[[7]][5000:43000]
wave_left_mark[[8]] <- wave_left_mark[[8]][10000:62000]
wave_left_mark[[9]] <- wave_left_mark[[9]][25000:51000]
wave_left_mark[[10]] <- wave_left_mark[[10]][12000:49000]
wave_left_mark[[12]] <- wave_left_mark[[12]][12000:52000]
wave_file_mark[[3]] <- wave_file_mark[[3]][10000:47000]
wave_file_mark[[5]] <- wave_file_mark[[5]][10000:53000]
wave_file_mark[[6]] <- wave_file_mark[[6]][0:39000]
wave_file_mark[[7]] <- wave_file_mark[[7]][5000:43000]
wave_file_mark[[8]] <- wave_file_mark[[8]][10000:62000]
wave_file_mark[[9]] <- wave_file_mark[[9]][25000:51000]
wave_file_mark[[10]] <- wave_file_mark[[10]][12000:49000]
wave_file_mark[[12]] <- wave_file_mark[[12]][12000:52000]
dir_gleb <- 'Brain8-main/gleb'
all_files_gleb <- list.files(dir_gleb)
wave_file_gleb <- list()
wave_left_gleb <- list()
for (i in all_files_gleb) {
wave_file_gleb[[i]] <- readWave(file.path(dir_gleb, i))
wave_left_gleb[[i]] <- readWave(file.path(dir_gleb, i))@left
}
#labels
gleb_lab <- list()
for (i in 1:length(all_files_gleb)) {
labels <- gsub(".wav", "", all_files_gleb[i])
gleb_lab[i] <- strsplit(labels, "")
}
gleb_lab <- gleb_lab %>% unlist()
plot(wave_file_mark[[1]], type = 'l')
plot(wave_file_mark[[1]]@left, type = 'l')
plot(wave_file_mark[[2]]@left, type = 'l')
plot(wave_file_gleb[[2]]@left, type = 'l')
all_files_gleb
plot(wave_file_gleb[[4]]@left, type = 'l')
all_files_mark_new <- gsub("L", "R", all_files_mark) %>% gsub("R", "L", all_files_mark)
all_files_mark_new <- gsub("L", "R", all_files_mark)
all_files_mark_new
all_files_mark_new <- gsub('L', 'R',
gsub('R', 'L', all_files_mark))
all_files_mark_new
install.packages('stringi')
install.packages("stringi")
library(stringi)
all_files_mark_new <- stri_replace_all_regex(all_files_mark, pattern = c('L', 'R'), replacement = c('R', 'L'), vectorize = FALSE)
all_files_mark_new
setwd("C:/Users/markz/Documents/GitHub/Brain8")
library(tuneR)
wave <- readWave('BBB.wav')
plot(wave@left, type = 'l')
which(wave@left, is.na())
?is.na
which(is_na(wave@left))
which(is.na(wave@left))
lol <- c(NaN)
which(is.na(lol))
lol <- c(NaN, NaN)
which(is.na(lol))
which(is.na(wave@left))
lol <- c(1, 2)
which(is.na(lol))
which(is.nan(wave@left))
which(is.NaN(wave@left))
which(is.nan(wave@left))
section <- wave[47001:57001]@left
plot(section,type = 'l')
print(mean(event_arr**2))**(1/2)
print(mean(section**2))**(1/2)
print((mean(section**2))**(1/2))
print((mean(section^2))^(1/2))
print(section)
(mean(section^2))^(1/2)
(mean(section^2))
section^2
